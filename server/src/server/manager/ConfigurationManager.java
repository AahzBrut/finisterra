package server.manager;

import com.badlogic.gdx.files.FileHandle;
import com.badlogic.gdx.utils.Json;
import com.esotericsoftware.minlog.Log;
import server.configs.CharClassConfiguration;
import server.configs.ServerConfiguration;
import shared.util.AOJson;

import java.io.File;

/**
 * Configuration Manager
 * It's a singleton class that provides the server configuration objects generated by JSON files
 */
public class ConfigurationManager {

    private static ConfigurationManager manager;

    private ServerConfiguration serverConfiguration;
    private CharClassConfiguration charClassConfiguration;

    public ServerConfiguration getServerConfig() {
        return serverConfiguration;
    }

    public CharClassConfiguration getCharClassConfig() {
        return charClassConfiguration;
    }

    private ConfigurationManager() {
        loadServerConfig();
        loadCharsConfig();
    }

    private void loadServerConfig() {
        Json json = new AOJson();

        try {
            // DO NOT USE 'Gdx.Files', because 'Gdx.Files' in the launcher is always NULL!
            serverConfiguration = json.fromJson(ServerConfiguration.class, new FileHandle(ServerConfiguration.PATH));
        } catch (Exception ex) {
            Log.debug("Server configuration file not found! Creating default...");
            serverConfiguration = new ServerConfiguration();
            serverConfiguration.loadDefaultValues();
            serverConfiguration.save();
        }
    }

    private void loadCharsConfig() {
        Json json = new AOJson();

        try {
            // DO NOT USE 'Gdx.Files', because 'Gdx.Files' in the launcher is always NULL!
            File file = new File(ServerConfiguration.PATH);
            if (!file.exists()) {
                throw new Exception("No existe el archivo");
            }
            charClassConfiguration = json.fromJson(CharClassConfiguration.class, new FileHandle(CharClassConfiguration.PATH));
        } catch (Exception ex) {

            Log.info(ex.getMessage());
            Log.info(ex.getCause().getStackTrace().toString());
            Log.info("Char class configuration file not found! Creating default...");
            charClassConfiguration = new CharClassConfiguration();
            charClassConfiguration.loadDefaultValues();
            charClassConfiguration.save();
        }
    }

    public static ConfigurationManager getInstance() {
        if (manager == null) {
            manager = new ConfigurationManager();
        }

        return manager;
    }
}
